name: 'Automated Tests'

on:
  pull_request:
    branches:
      - 'trunk'
    
jobs:
  build:
    name: 'Automated Tests'
    runs-on: ubuntu-latest

    outputs:
      only_docs: ${{ steps.check.outputs.only_docs }}

    steps:

      - name: Checkout repository
        uses: actions/checkout@v3

        with:
          fetch-depth: 0 # Fetch all history for all branches and tags

      - name: Early exit if only docs changes
        id: "check"
        run: |

          if git diff --name-only origin/trunk | grep -vE '^(docs/|README\.md)'; then
            echo "Changes found outside docs or README"
            echo "::set-output name=only_docs::false"
            
          else
            echo "Only changes in docs or README"
            echo "::set-output name=only_docs::true"
          fi

      - name: Set up Docker Buildx
      
        uses: docker/setup-buildx-action@v2

      - name: Generate .env file from secret
        if: ${{ steps.check.outputs.only_docs == 'false' }}
        run: echo "${{ secrets.ENV_VARIABLES }}" > .env

      - name: Build docker compose
        if: ${{ steps.check.outputs.only_docs == 'false' }}
        run: docker compose build 

      - name: Start docker compose
        if: ${{ steps.check.outputs.only_docs == 'false' }}
        run: ENVIRONMENT=STAGING docker compose up -d --wait --wait-timeout 60

      - name: Wait for services to be healthy
        if: ${{ steps.check.outputs.only_docs == 'false' }}
        run: |
          echo "Waiting for services to be healthy..."
          sleep 15 # Adjust the sleep time as needed
          # You can also use a loop to check the health status of services if needed
          # For example, you can use curl or wget to check if a service is up and running
          for i in {1..5}; do
            if curl -s http://localhost:8001/docs; then
              echo "Service is up!"
              break
            else
              echo "Service is not healthy yet. Waiting..."
              sleep 5 # Wait for a few seconds before checking again
            fi
          done
          if ! curl -s http://localhost:8001/docs; then
            echo "Service is still not healthy after waiting. Exiting."
            exit 1
          fi
        
      - name: Run tests
        if: ${{ steps.check.outputs.only_docs == 'false' }}
        run: |
          docker exec $(docker ps -qf "name=web") pytest
        
      - name: Stop dockercompose
        if: ${{ steps.check.outputs.only_docs == 'false' }}
        run: docker compose down
